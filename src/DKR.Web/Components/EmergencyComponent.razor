@using DKR.Core.Services
@using DKR.Core.Entities  
@using Microsoft.JSInterop
@inject EmergencyService EmergencyService
@inject IJSRuntime JSRuntime

@if (_showModal)
{
    <div class="modal show d-block" style="background: rgba(0,0,0,0.8);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content border-danger">
                <div class="modal-header bg-danger text-white">
                    <h4 class="modal-title">
                        <i class="oi oi-warning"></i> NOTFALL-PROTOKOLL
                    </h4>
                    <button type="button" class="btn-close btn-close-white" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body">
                    @if (_isProcessing)
                    {
                        <div class="text-center">
                            <div class="spinner-border text-danger"></div>
                            <p class="mt-2">Notfall wird bearbeitet...</p>
                        </div>
                    }
                    else
                    {
                        <EditForm Model="_emergencyForm" OnValidSubmit="HandleEmergency">
                            <div class="mb-3">
                                <label class="form-label">Art des Notfalls</label>
                                <InputSelect class="form-select" @bind-Value="_emergencyForm.Type">
                                    <option value="@DKR.Core.Entities.EmergencyType.Overdose">Überdosierung</option>
                                    <option value="@DKR.Core.Entities.EmergencyType.Unconsciousness">Bewusstlosigkeit</option>
                                    <option value="@DKR.Core.Entities.EmergencyType.Injury">Verletzung</option>
                                    <option value="@DKR.Core.Entities.EmergencyType.Cardiac">Herzstillstand</option>
                                    <option value="@DKR.Core.Entities.EmergencyType.Other">Sonstiges</option>
                                </InputSelect>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Beschreibung</label>
                                <InputTextArea class="form-control" @bind-Value="_emergencyForm.Notes" rows="3" />
                            </div>
                            <div class="d-flex gap-2">
                                <button type="submit" class="btn btn-danger">NOTFALL MELDEN</button>
                                <button type="button" class="btn btn-secondary" @onclick="CloseModal">Abbrechen</button>
                            </div>
                        </EditForm>
                    }
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public EventCallback<EmergencyEvent> OnEmergencyReported { get; set; }

    private bool _showModal = false;
    private bool _isProcessing = false;
    private EmergencyForm _emergencyForm = new();

    public void ShowModal()
    {
        _showModal = true;
        _emergencyForm = new EmergencyForm();
        StateHasChanged();
    }

    private void CloseModal()
    {
        _showModal = false;
        StateHasChanged();
    }

    private async Task HandleEmergency(EditContext context)
    {
        _isProcessing = true;
        StateHasChanged();

        try
        {
            var emergencyEvent = new EmergencyEvent
            {
                Type = _emergencyForm.Type,
                Notes = _emergencyForm.Notes ?? "",
                OccurredAt = DateTime.UtcNow,
                EmergencyServicesCalled = true,
                ActionsPerformed = new List<string> { "Notfall gemeldet" }
            };

            var result = await EmergencyService.ReportEmergencyAsync(emergencyEvent);
            await OnEmergencyReported.InvokeAsync(result);

            await JSRuntime.InvokeVoidAsync("alert", "Notfall wurde gemeldet!");
            CloseModal();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Fehler: {ex.Message}");
        }
        finally
        {
            _isProcessing = false;
            StateHasChanged();
        }
    }

    public class EmergencyForm
    {
        public DKR.Core.Entities.EmergencyType Type { get; set; } = DKR.Core.Entities.EmergencyType.Overdose;
        public string? Notes { get; set; }
    }
}